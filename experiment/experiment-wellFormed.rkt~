#lang racket

(require cover)
(require "../peg-gen.rkt"
         "../tests/verf-well-formed.rkt"
         rackcheck
         typed-peg/core
         typed-peg/typing/infer
         typed-peg/typing/type
         typed-peg/typing/constraint
         typed-peg/tree
         rackunit)


 
(define (getGrammar e)
  (car e)
  )

(define (getExpression e)
  (car (cdr e))
  )


;(check-property wellformed-ford)
;(check-property (make-config #:tests 20) wellformed-ford)
(define-property wellformed-ford ([peg  (gen:peg 10 10 4)])
    (check-equal?  (is-WF (getGrammar peg) (getExpression peg) '()) #t)
  )


  

#;(check-property type-checks)
#;(check-property type-contexts-match)
#;(check-property obey-constraint)
#;(check-property no-left-recursion)
; For experimetns uncomment line below !
#;(check-property (make-config #:tests 200000 #:deadline (* (+ (current-inexact-milliseconds) 3600000) 24)) wellformed-ford)
(check-property (make-config #:tests 100 #:deadline (+ (current-inexact-milliseconds) 3600000)) wellformed-ford)
